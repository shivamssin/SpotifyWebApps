@{
    ViewData["Title"] = "Spotify Web App";
}

<div class="container-fluid px-4 py-4">
    <div class="row justify-content-center">
        <div class="col-12 col-xl-10">
            <div class="text-center mb-4">
                <h1 class="display-4 text-success mb-2">
                    <i class="fab fa-spotify me-2"></i>Spotify Web App
                </h1>
                <p class="lead text-muted">Discover your music, control playback, and explore your favorites</p>
            </div>

            @if (ViewBag.IsAuthenticated == true)
            {
                <div class="alert alert-success shadow-sm border-0 mb-4">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <i class="fas fa-check-circle me-2"></i>
                            <strong>Connected to Spotify</strong>
                            <small class="d-block text-success-emphasis">Ready to explore your music!</small>
                        </div>
                        <a href="/Home/Logout" class="btn btn-outline-danger btn-sm">
                            <i class="fas fa-sign-out-alt me-1"></i>Logout
                        </a>
                    </div>
                </div>

                <!-- Now Playing Section - Featured -->
                <div class="card shadow-sm border-0 mb-4 bg-gradient">
                    <div class="card-header bg-primary text-white py-3">
                        <div class="d-flex justify-content-between align-items-center">
                            <h3 class="mb-0">
                                <i class="fas fa-play-circle me-2"></i>Now Playing
                            </h3>
                            <div>
                                <button class="btn btn-light btn-sm me-2" onclick="loadNowPlaying()">
                                    <i class="fas fa-sync-alt me-1"></i>Refresh
                                </button>
                                <button class="btn btn-outline-light btn-sm" onclick="stopPlayback()">
                                    <i class="fas fa-stop me-1"></i>Stop
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="card-body p-4">
                        <div id="now-playing-container"></div>
                    </div>
                </div>

                <div class="row">
                    <!-- Top Tracks Section -->
                    <div class="col-lg-8 mb-4">
                        <div class="card shadow-sm border-0 h-100">
                            <div class="card-header bg-success text-white py-3">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h3 class="mb-0">
                                        <i class="fas fa-fire me-2"></i>Your Top Tracks
                                    </h3>
                                    <button class="btn btn-outline-light btn-sm" onclick="loadTopTracks()">
                                        <i class="fas fa-refresh me-1"></i>Load Tracks
                                    </button>
                                </div>
                            </div>
                            <div class="card-body p-0">
                                <div id="top-tracks-container"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Following Artists Section -->
                    <div class="col-lg-4 mb-4">
                        <div class="card shadow-sm border-0 h-100">
                            <div class="card-header bg-info text-white py-3">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h3 class="mb-0">
                                        <i class="fas fa-users me-2"></i>Following
                                    </h3>
                                    <button class="btn btn-outline-light btn-sm" onclick="loadFollowingArtists()">
                                        <i class="fas fa-refresh me-1"></i>Load
                                    </button>
                                </div>
                            </div>
                            <div class="card-body p-0" style="max-height: 600px; overflow-y: auto;">
                                <div id="following-artists-container"></div>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <div class="card shadow-lg border-0 mx-auto" style="max-width: 500px;">
                        <div class="card-body p-5">
                            <i class="fab fa-spotify display-1 text-success mb-4"></i>
                            <h2 class="card-title mb-3">Welcome to Spotify Web App</h2>
                            <p class="card-text text-muted mb-4">
                                Connect your Spotify account to view your top tracks, control playback,
                                and discover the artists you follow.
                            </p>
                            <a href="/Home/Login" class="btn btn-success btn-lg px-4 py-3">
                                <i class="fab fa-spotify me-2"></i>Connect to Spotify
                            </a>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Improved JavaScript with Better UI -->
<script>
    console.log('Spotify Web App JavaScript loaded');

    // Load Top Tracks Function with Improved UI
    async function loadTopTracks() {
        console.log('Loading top tracks...');
        showLoading('top-tracks-container');
        try {
            const response = await fetch('/api/spotify/top-tracks');
            const result = await response.json();

            if (response.ok) {
                displayTopTracks(result.data);
            } else {
                showError('top-tracks-container', result.error || 'Failed to load top tracks');
            }
        } catch (error) {
            console.error('Error loading top tracks:', error);
            showError('top-tracks-container', 'Network error: ' + error.message);
        }
    }

    // Load Now Playing Function
    async function loadNowPlaying() {
        console.log('Loading now playing...');
        showLoading('now-playing-container');
        try {
            const response = await fetch('/api/spotify/now-playing');
            const result = await response.json();

            if (response.ok) {
                displayNowPlaying(result.data);
            } else {
                showError('now-playing-container', result.error || 'Failed to load now playing');
            }
        } catch (error) {
            console.error('Error loading now playing:', error);
            showError('now-playing-container', 'Network error: ' + error.message);
        }
    }

    // Load Following Artists Function
    async function loadFollowingArtists() {
        console.log('Loading following artists...');
        showLoading('following-artists-container');
        try {
            const response = await fetch('/api/spotify/following-artists');
            const result = await response.json();

            if (response.ok) {
                displayFollowingArtists(result.data);
            } else {
                showError('following-artists-container', result.error || 'Failed to load following artists');
            }
        } catch (error) {
            console.error('Error loading following artists:', error);
            showError('following-artists-container', 'Network error: ' + error.message);
        }
    }

    // Play Track Function
    async function playTrack(trackUri, trackName) {
        console.log('Playing track:', trackName);
        try {
            showAlert('Starting playback for "' + trackName + '"...', 'info');

            const response = await fetch('/api/spotify/play', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ trackUri: trackUri })
            });

            if (response.ok) {
                showAlert('Now playing: "' + trackName + '"', 'success');
                setTimeout(loadNowPlaying, 1500);
            } else {
                const result = await response.json();
                showAlert('Error: ' + (result.error || 'Playback failed'), 'danger');
            }
        } catch (error) {
            console.error('Error starting playback:', error);
            showAlert('Failed to start playback: ' + error.message, 'danger');
        }
    }

    // Stop Playback Function
    async function stopPlayback() {
        console.log('Stopping playback...');
        try {
            const response = await fetch('/api/spotify/stop', { method: 'POST' });

            if (response.ok) {
                showAlert('Playback stopped', 'success');
                setTimeout(loadNowPlaying, 1000);
            } else {
                const result = await response.json();
                showAlert('Error: ' + (result.error || 'Stop failed'), 'danger');
            }
        } catch (error) {
            console.error('Error stopping playback:', error);
            showAlert('Failed to stop playback: ' + error.message, 'danger');
        }
    }

    // Display Top Tracks with List View
    function displayTopTracks(tracks) {
        const container = document.getElementById('top-tracks-container');

        if (!tracks || tracks.length === 0) {
            container.innerHTML = '<div class="p-4 text-center text-muted">No top tracks found</div>';
            return;
        }

        let html = '<div class="list-group list-group-flush">';
        tracks.forEach((track, index) => {
            const artists = track.artists ? track.artists.map(a => a.name).join(', ') : 'Unknown Artist';
            const imageUrl = (track.album?.images?.[0]?.url) || 'https://via.placeholder.com/64x64?text=♪';
            const albumName = track.album?.name || 'Unknown Album';

            html += `
                <div class="list-group-item border-0 py-3">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0 me-3">
                            <span class="badge bg-secondary rounded-pill">${index + 1}</span>
                        </div>
                        <img src="${imageUrl}" class="rounded me-3" style="width: 64px; height: 64px; object-fit: cover;" alt="${track.name}">
                        <div class="flex-grow-1 min-width-0">
                            <div class="d-flex justify-content-between align-items-start">
                                <div class="min-width-0 flex-grow-1">
                                    <h6 class="mb-1 text-truncate">${track.name || 'Unknown Track'}</h6>
                                    <p class="mb-1 text-muted small">${artists}</p>
                                    <p class="mb-0 text-muted small">${albumName}</p>
                                </div>
                                <div class="flex-shrink-0 ms-2">
                                    <button class="btn btn-success btn-sm me-1" onclick="playTrack('${track.uri}', '${track.name?.replace(/'/g, "\\'")}')">
                                        <i class="fas fa-play"></i>
                                    </button>
                                    ${track.external_urls?.spotify ?
                                        `<a href="${track.external_urls.spotify}" target="_blank" class="btn btn-outline-success btn-sm">
                                            <i class="fab fa-spotify"></i>
                                        </a>` : ''
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        });
        html += '</div>';
        container.innerHTML = html;
    }

    // Display Now Playing
    function displayNowPlaying(nowPlaying) {
        const container = document.getElementById('now-playing-container');

        if (!nowPlaying || !nowPlaying.item) {
            container.innerHTML = `
                <div class="text-center py-4">
                    <i class="fas fa-music text-muted" style="font-size: 3rem;"></i>
                    <p class="text-muted mt-3 mb-0">Nothing is currently playing</p>
                    <small class="text-muted">Start playing music from your Spotify app or use the tracks below</small>
                </div>
            `;
            return;
        }

        const track = nowPlaying.item;
        const artists = track.artists ? track.artists.map(a => a.name).join(', ') : 'Unknown Artist';
        const imageUrl = (track.album?.images?.[0]?.url) || 'https://via.placeholder.com/200x200?text=♪';
        const isPlaying = nowPlaying.is_playing;

        container.innerHTML = `
            <div class="row align-items-center">
                <div class="col-auto">
                    <img src="${imageUrl}" class="rounded shadow" style="width: 120px; height: 120px; object-fit: cover;" alt="${track.name}">
                </div>
                <div class="col">
                    <h4 class="mb-2">${track.name || 'Unknown Track'}</h4>
                    <h6 class="text-muted mb-2">${artists}</h6>
                    <p class="text-muted mb-3">${track.album?.name || 'Unknown Album'}</p>
                    <div class="d-flex align-items-center gap-2">
                        <span class="badge ${isPlaying ? 'bg-success' : 'bg-secondary'} fs-6 px-3 py-2">
                            <i class="fas ${isPlaying ? 'fa-play' : 'fa-pause'} me-1"></i>
                            ${isPlaying ? 'Playing' : 'Paused'}
                        </span>
                        ${track.external_urls?.spotify ?
                            `<a href="${track.external_urls.spotify}" target="_blank" class="btn btn-outline-success">
                                <i class="fab fa-spotify me-1"></i>Open in Spotify
                            </a>` : ''
                        }
                    </div>
                </div>
            </div>
        `;
    }

    // Display Following Artists
    function displayFollowingArtists(artists) {
        const container = document.getElementById('following-artists-container');

        if (!artists || artists.length === 0) {
            container.innerHTML = '<div class="p-4 text-center text-muted">No followed artists found</div>';
            return;
        }

        let html = '<div class="list-group list-group-flush">';
        artists.slice(0, 20).forEach(artist => { // Limit to 20 for better performance
            const imageUrl = (artist.images?.[0]?.url) || 'https://via.placeholder.com/50x50?text=♪';
            const followers = artist.followers ? artist.followers.total.toLocaleString() : 'N/A';

            html += `
                <div class="list-group-item border-0 py-2">
                    <div class="d-flex align-items-center">
                        <img src="${imageUrl}" class="rounded-circle me-3" style="width: 50px; height: 50px; object-fit: cover;" alt="${artist.name}">
                        <div class="flex-grow-1 min-width-0">
                            <h6 class="mb-1 text-truncate">${artist.name || 'Unknown Artist'}</h6>
                            <p class="mb-0 text-muted small">${followers} followers</p>
                        </div>
                        ${artist.external_urls?.spotify ?
                            `<a href="${artist.external_urls.spotify}" target="_blank" class="btn btn-outline-success btn-sm">
                                <i class="fab fa-spotify"></i>
                            </a>` : ''
                        }
                    </div>
                </div>
            `;
        });
        html += '</div>';
        container.innerHTML = html;
    }

    // Utility Functions
    function showLoading(containerId) {
        const container = document.getElementById(containerId);
        if (container) {
            container.innerHTML = `
                <div class="text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-3 text-muted">Loading...</p>
                </div>
            `;
        }
    }

    function showError(containerId, message) {
        const container = document.getElementById(containerId);
        if (container) {
            container.innerHTML = `
                <div class="alert alert-danger m-3">
                    <i class="fas fa-exclamation-triangle me-2"></i>${message}
                </div>
            `;
        }
    }

    function showAlert(message, type) {
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type} alert-dismissible fade show shadow-sm`;
        alertDiv.style.position = 'fixed';
        alertDiv.style.top = '20px';
        alertDiv.style.right = '20px';
        alertDiv.style.zIndex = '9999';
        alertDiv.style.maxWidth = '400px';
        alertDiv.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;

        document.body.appendChild(alertDiv);
        setTimeout(() => alertDiv?.remove(), 4000);
    }

    // Auto-load data when authenticated
    document.addEventListener('DOMContentLoaded', function() {
        console.log('DOM loaded');
        @if (ViewBag.IsAuthenticated == true)
        {
                <text>
                    setTimeout(() => {
                        loadTopTracks();
                        loadNowPlaying();
                        loadFollowingArtists();
                    }, 1000);
                </text>
        }
    });
</script>